import java.util.Arrays;
import java.util.Random;

public class Tris {

    public static void triParInsertion(int[] tab){
        int j, pivot;
        for (int i=tab.length-1; i>=0; i--){
            j=i;
            pivot=tab[i];
            while(j>=1 && tab[j-1]>tab[i]){
                tab[j]=tab[j-1];
                j--;
            }
            tab[j]=pivot;
        }
        System.out.println("Tri par insertion effectué.");
    }

    public static void triParSelection (int[] tab){
        int posMin, pivot;
        for(int i=0; i<tab.length-1; i++){
            posMin = i;
            for(int j=i; j<tab.length; j++)
                if(tab[j]<tab[posMin]) posMin=j;
            pivot=tab[i];
            tab[i]=tab[posMin];
            tab[posMin]=pivot;
        }
        System.out.println("Tri par sélection effectué.");
    }
    public static void triAPeigne (int[] tab){
        double gap=tab.length;
        int pivot;
        boolean echangé;
        do{
            echangé=false;
            gap=gap/1.3;
            if (gap<1) gap=1;
            for(int i=0; i<tab.length-gap; i++){
                if (tab[i]>tab[(int)(Math.floor(i+gap))]){
                    pivot=tab[i];
                    tab[i]=tab[(int)(Math.floor(i+gap))];
                    tab[(int)(Math.floor(i+gap))]=pivot;
                    echangé=true;
                }
            }
        }while (echangé || gap>1);
        System.out.println("Tri à peigne effectué.");
    }

    public static void triComptage ( int min, int maj, int[] tab){
        // On crée le tabCompteur et on l'initialise
        int[] tabCompteur;
        if(min<0){
            System.out.println("Le tri comptge ne fonctionne pas si il y a des nombres négatifs");
        }else {

        tabCompteur = new int[maj - min + 1];

            // On décompte
            for (int i = 0; i < tab.length; i++) tabCompteur[tab[i] - min] += 1;

            int k = 0;
            for (int i = 0; i < tabCompteur.length; i++)
                for (int j=0; j<tabCompteur[i]; j++) {
                    tab[k] = i + min;
                    k++;
                }
            for (int s : tab) System.out.print(" " +s);
            System.out.println("Tri comptage effectué.");
        }
    }

    public static void CentPlusGrandesValeurs (int[] tab, int[] CentValeurs){
        int pivot, posMaj;
        for(int i=0; i<100; i++){
            posMaj = i;
            for (int j=i; j<tab.length; j++)
                if (tab[j]>tab[posMaj]) posMaj=j;
            pivot = tab[i];
            tab[i]=tab[posMaj];
            tab[posMaj]=pivot;
            CentValeurs[i]=tab[i];
        }
    }

    public static int[] générerDonnées(int n) {
        Random random = new Random();
        int[] t = new int[n];
        for (int i = 0 ; i < t.length ; i++)
            t[i] = random.nextInt(); // tirage aléatoire d'un int quelconque (compris entre -2^31 et 2^31-1)
        return t;
    }



    public static void CentPlusGrandesValeursJavaSort ( int[] tab, int[] CentValeurs){
        Arrays.sort(tab);
    }



    /*
        Retourne un tableau de int de longueur n rempli avec des valeurs aléatoires comprises entre min et max inclus.
    */
    public static int[] générerDonnéesEntreBornes(int n, int min, int max) {
        Random random = new Random();
        int[] t = new int[n];
        for (int i = 0 ; i < t.length ; i++)
            t[i] = random.nextInt(max-min+1)+min; // nextInt(borne) retourne un int compris entre 0 inclus et borne exclus.
        return t;
    }
}
